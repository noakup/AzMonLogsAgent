let parser=(
  starttime:datetime=datetime(null), 
  endtime:datetime=datetime(null),
  srcipaddr_has_any_prefix:dynamic=dynamic([]), 
  ipaddr_has_any_prefix:dynamic=dynamic([]), 
  url_has_any:dynamic=dynamic([]),
  httpuseragent_has_any:dynamic=dynamic([]),
  eventresultdetails_in:dynamic=dynamic([]),
  eventresult:string='*',
  disabled:bool=false
)
{
  let src_or_any=set_union(srcipaddr_has_any_prefix, ipaddr_has_any_prefix); 
  ASimWebSessionLogs
    | where not(disabled)
    | where (isnull(starttime) or TimeGenerated >= starttime)
        and (isnull(endtime) or TimeGenerated <= endtime)
    | where (array_length(url_has_any) == 0 or Url has_any (url_has_any))
    | where (array_length(httpuseragent_has_any) == 0 or HttpUserAgent has_any(httpuseragent_has_any))
    | where (array_length(eventresultdetails_in) == 0 or tostring(EventResultDetails) has_any(eventresultdetails_in))
    | where (eventresult == '*' or EventResult =~ eventresult)
    | extend temp_SrcMatch=has_any_ipv4_prefix(SrcIpAddr,src_or_any)
          , temp_DstMatch=has_any_ipv4_prefix(DstIpAddr,ipaddr_has_any_prefix)
    | extend ASimMatchingIpAddr=case(
                                  array_length(src_or_any) == 0 ,"-",
                                  temp_SrcMatch and temp_DstMatch, "Both",
                                  temp_SrcMatch, "SrcIpAddr",
                                  temp_DstMatch, "DstIpAddr",
                                  "No match"
                              )
    | where ASimMatchingIpAddr != "No match" 
    | project-away temp_*
    // 
    // -- Schema fixed
    | extend
        FileSize = tolong(FileSize)
    //
    // -- Log Analytics global fields renaming
    | project-rename
        EventUid          = _ItemId,
        DvcScopeId        = _SubscriptionId
    //
    // -- ASIM Global fields
    | extend          
        EventSchema       = "WebSession"
    | extend
        //
        // -- Default values
        EventEndTime      = coalesce (EventEndTime, TimeGenerated),
        EventStartTime    = coalesce (EventStartTime, TimeGenerated),
        //
        // -- Multi-source aliases
        Dvc = iff (EventType == 'HTTPSession',
          coalesce (DvcFQDN, DvcHostname, DvcIpAddr, DvcId, DstMacAddr, _ResourceId, strcat (EventVendor,'/', EventProduct)),
          coalesce (DvcFQDN, DvcHostname, DstFQDN, DstHostname, DvcIpAddr, DstIpAddr, DvcId, DstDvcId, DstMacAddr, _ResourceId, strcat (EventVendor,'/', EventProduct))
        ),
        Dst               = coalesce (DstFQDN, DstHostname, DstIpAddr, DstDvcId),
        Src               = coalesce (SrcFQDN, SrcHostname, SrcIpAddr, SrcDvcId),
        Rule              = coalesce(RuleName, tostring(RuleNumber)),
        //
        // -- Aliases which depend on EventType
        Hostname = iff  (EventType == "EndpointNetworkSession" and NetworkDirection == ("Inbound"), SrcHostname, DstHostname),
        IpAddr = iff  (EventType == "EndpointNetworkSession" and NetworkDirection == ("Inbound"), DstIpAddr, SrcIpAddr),
        //
        // -- Simple aliases
        Duration          = NetworkDuration,
        SessionId         = NetworkSessionId,
        User              = SrcUsername,
        HttpStatusCode    = EventResultDetails,
        UserAgent         = HttpUserAgent
        // --
        // -- Aliased fields not implemented in ASimWebSessionLogs yet 
        //InnerVlanId     = SrcVlanId,
        //OuterVlanId     = DstVlanId,
        //DvcInterface    = coalesce(DvcInterface, DvcInboundInterface, DvcOutboundInterface), 
    | project-away
        TenantId, SourceSystem, _ResourceId
};
parser (starttime=starttime, endtime=endtime, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, ipaddr_has_any_prefix=ipaddr_has_any_prefix, url_has_any=url_has_any, httpuseragent_has_any=httpuseragent_has_any, eventresultdetails_in=eventresultdetails_in, eventresult=eventresult, disabled=disabled)
