let DvcActionLookup = datatable (DeviceAction:string, DvcAction: string) 
[
  'Allowed', 'Allow',
  'Blocked', 'Deny'
]; 
let remove_protocol_from_list = (list:dynamic) 
{
    print list 
    | mv-apply l = print_0 to typeof(string) on
    ( extend l = replace_regex (tostring(l), "^(?i:.*?)://", "") ) 
    | project l
};
let parser = (
starttime:datetime=datetime(null), 
endtime:datetime=datetime(null),
srcipaddr_has_any_prefix:dynamic=dynamic([]), 
url_has_any:dynamic=dynamic([]),
httpuseragent_has_any:dynamic=dynamic([]),
eventresultdetails_in:dynamic=dynamic([]),
eventresult:string='*',
disabled:bool=false
){
CommonSecurityLog | where not(disabled)
| where DeviceVendor == "Zscaler"
| where DeviceProduct == "NSSWeblog"
  // -- Pre filtering
| where  
  (isnull(starttime) or TimeGenerated >= starttime) 
  and (isnull(endtime) or TimeGenerated <= endtime) 
  and ((array_length(httpuseragent_has_any) == 0) or (RequestClientApplication has_any (httpuseragent_has_any)))
  and ((array_length(srcipaddr_has_any_prefix) == 0) or has_any_ipv4_prefix(SourceIP, srcipaddr_has_any_prefix))
  and ((array_length(eventresultdetails_in) == 0) or (AdditionalExtensions has_any (eventresultdetails_in)))
  and ((array_length(url_has_any) == 0) or (RequestURL has_any (remove_protocol_from_list(url_has_any))))
// -- Parse
| parse AdditionalExtensions with 
    "reason=" EventResultOriginalDetails:string ";"
    "outcome=" EventResultDetails:string ";"
    "cat=" * ";"
    "rulelabel=" RuleName:string ";"
    "ruletype=" ruletype:string ";"
    "urlclass=" urlclass:string ";"
    "devicemodel=" * 
// -- Post filtering
| where
  ((array_length(eventresultdetails_in) == 0) or (EventResultDetails in (eventresultdetails_in)))
// -- Event fields
| lookup DvcActionLookup on DeviceAction
| extend 
  EventCount=int(1), 
  EventStartTime=TimeGenerated,  
  EventVendor = "Zscaler", 
  EventProduct = "ZIA Proxy", 
  EventSchema = "WebSession", 
  EventSchemaVersion="0.1.0", 
  EventType = 'HTTPsession',
  EventEndTime=TimeGenerated
// -- Field mapping
| project-rename
  EventProductVersion = DeviceVersion,
  NetworkApplicationProtocol = ApplicationProtocol,
  HttpContentType = FileType,
  HttpUserAgent = RequestClientApplication,
  HttpRequestMethod = RequestMethod,
  DstAppName = DestinationServiceName,
  DstIpAddr = DestinationIP,
  DstFQDN = DestinationHostName,
  SrcIpAddr = SourceIP,
  SrcUsername = SourceUserName,
  SrcNatIpAddr= SourceTranslatedAddress,
  SrcUserDepartment = SourceUserPrivileges, // Not part of the standard schema
  ThreatRiskLevel = DeviceCustomNumber1,
  UrlCategory = DeviceCustomString2,
  ThreatName = DeviceCustomString5,
  FileMD5 = DeviceCustomString6
// -- Calculated fields
| extend
  Url = iff (RequestURL == "", "", strcat (tolower(NetworkApplicationProtocol), "://", url_decode(RequestURL))),
  UrlCategory = strcat (urlclass, "/", UrlCategory),
  ThreatCategory = iff(DeviceCustomString4 == "None", "", strcat (DeviceCustomString3, "/", DeviceCustomString4)),
  RuleName = iff (RuleName == "None", "", strcat (ruletype, "/", RuleName)),
  FileMD5 = iff (FileMD5 == "None", "", FileMD5),
  HttpReferrer = iff (RequestContext == "None", "", url_decode(RequestContext)),
  DstAppName = iff (DstAppName == "General Browsing", "", DstAppName),
  DstFQDNparts = split (DstFQDN, "."),
  DstHostnameNotAddr = DstIpAddr != DstFQDN,
  DstBytes = toint(ReceivedBytes),
  SrcBytes = toint(SentBytes),
  DvcHostname = tostring(Computer)
| extend
  DstHostname = iff (DstHostnameNotAddr, tostring(DstFQDNparts[0]), DstFQDN),
  DstDomain = iff (DstHostnameNotAddr, strcat_array(array_slice(DstFQDNparts,1,-1),"."), ""),
  DstFQDN = iff (DstHostnameNotAddr, DstFQDN, "") 
// -- Enrichment
| extend
  EventResult = iff (EventResultDetails == "NA" or toint(EventResultDetails) >= 400, "Failure", "Success"),
  EventSeverity = case (ThreatRiskLevel > 90, "High", ThreatRiskLevel > 60, "Medium", ThreatRiskLevel > 10, "Low",  "Informational"),
  DstAppType = "SaaS application",
  DstDomainType = iff (DstHostnameNotAddr, "FQDN", ""),
  SrcUsernameType = "UPN"
// -- Aliases
| extend
  Dvc = DvcHostname,
  UserAgent = HttpUserAgent,
  User = SrcUsername,
  HttpStatusCode = EventResultDetails,
  IpAddr = SrcNatIpAddr,
  Src = SrcNatIpAddr,
  Dst = DstFQDN,
  Hash = FileMD5,
  Hostname = DstHostname,
  FileHashType = iff(FileMD5 == "", "", "MD5")
| project-away 
  DstFQDNparts, AdditionalExtensions, DeviceCustom*
};
parser (starttime, endtime, srcipaddr_has_any_prefix, url_has_any, httpuseragent_has_any, eventresultdetails_in, eventresult, disabled)
