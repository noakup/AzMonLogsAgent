let parser = (disabled:bool=false) 
{
  DefenderIoTRawEvent
  | where RawEventName == "NetworkConnectionData"
  | project-rename 
      DvcSubscriptionId = AzureSubscriptionId
  | extend 
      Dvc = tostring(EventDetails.SourceId),
      DstDvcId = tostring(EventDetails.Destination.DeviceId),
      DstMacAddr = tostring(EventDetails.Destination.MacAddress),
      DstIpAddr = tostring(EventDetails.Destination.IPAddress),
      DstPortNumber = toint(EventDetails.Destination.Port),
      DstDescription = tostring(EventDetails.Destination.DeviceName),
      SrcDvcId = tostring(EventDetails.Source.DeviceId),
      SrcMacAddr = tostring(EventDetails.Source.MacAddress),
      SrcIpAddr = tostring(EventDetails.Source.IPAddress),
      SrcPortNumber = toint(EventDetails.Source.Port),
      SrcDescription = tostring(EventDetails.Source.DeviceName),
      EventOriginalUid = tostring(EventDetails.Id),
      EventEndTime = todatetime(EventDetails.LastSeen),
      EventStartTime = todatetime(EventDetails.StartTime),
      NetworkProtocol = tostring(EventDetails.TransportProtocol)
  | extend
      EventProduct = 'Defender for IoT',
      EventResult = 'Success',
      EventSchema = 'NetworkSession',
      EventSchemaVersion='0.2.4',
      EventCount = toint(1),
      EventSeverity = 'Informational',
      EventType = iff(DstIpAddr=='' and SrcIpAddr == '','L2NetworkSession','NetworkSession'),
      NetworkDirection = iff(tobool(EventDetails.IsInternal), 'Local',''),
      EventVendor = 'Microsoft',
      DstDvcIdType = 'MD4IoTid',
      SrcDvcIdType = 'MD4IoTid'
  | extend // -- Aliases
      Dst = coalesce(DstIpAddr,DstMacAddr),
      Src = coalesce(SrcIpAddr,SrcMacAddr),
      IpAddr = SrcIpAddr,
      EventStartTime = EventEndTime
  | project-away 
      RawEventCategory, RawEventName, RawEventType, SourceSystem, TenantId, AgentVersion, IoTRawEventId, IsEmpty, AgentId, DeviceId, TimeStamp
  | project-away EventDetails, AssociatedResourceId
};
parser (disabled)