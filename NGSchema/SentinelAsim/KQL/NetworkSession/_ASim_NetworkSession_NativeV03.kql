let parser=(disabled:bool=false) 
{
  ASimNetworkSessionLogs  | where not(disabled)
    | project-rename
        EventUid = _ItemId
    | extend          
        EventSchema = "NetworkSession",
        DvcScopeId = iff(isempty(DvcSubscriptionId), _SubscriptionId, DvcSubscriptionId)
    //  -- Aliases
    | extend
        EventEndTime = iff (isnull(EventEndTime), TimeGenerated, EventEndTime),
        EventStartTime = iff (isnull(EventEndTime), TimeGenerated, EventStartTime),
        Dvc = case(EventType == 'L2NetworkSession',
              coalesce (DvcFQDN, DvcHostname, DvcId, _ResourceId, strcat (EventVendor,'/', EventProduct)),
              coalesce (DvcFQDN, DvcHostname, DvcIpAddr, DvcId, _ResourceId, strcat (EventVendor,'/', EventProduct))
        ),
        Dst = coalesce (DstFQDN, DstHostname, DstIpAddr, DstDvcId),
        Src = coalesce (SrcFQDN, SrcHostname, SrcIpAddr, SrcDvcId),
        DvcInterface = iff(isempty(DvcInterface), coalesce(DvcInboundInterface, DvcOutboundInterface), DvcInterface),
        Hostname = iff  (EventType == "EndpointNetworkSession" and NetworkDirection == ("Inbound"), SrcHostname, DstHostname),
        IpAddr = iff  (EventType == "EndpointNetworkSession" and NetworkDirection == ("Inbound"), DstIpAddr, SrcIpAddr),
        Rule = coalesce(NetworkRuleName, tostring(NetworkRuleNumber)),
        Duration = NetworkDuration,
        SessionId = NetworkSessionId,
        User = DstUsername,
        InnerVlanId = SrcVlanId,
        OuterVlanId = DstVlanId
    | project-away
        TenantId, SourceSystem, DvcSubscriptionId, _SubscriptionId, _ResourceId
  };
parser (disabled=disabled)
