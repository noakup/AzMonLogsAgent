// These Null functions are for the purpose of ingesting a null value to the NetworkSession fields that are not in use in the Windows Firewall scenarioscenario
let NullString = tostring("");
let NullInt = toint("");
let NullLong = tolong("");
let NullDateTime = todatetime("");

// This is for the purpose of mapping CommunicationDirection to the NetworkDirection
let NetworkDirectionMappings = parsejson('{"SEND":"Outbound","RECEIVE":"Inbound","FORWARD":"Forward","UNKNOWN":"NA"}');

// This is for the purpose of mapping Protocol to the NetworkProtocol
let NetworkProtocolMappings = parsejson(strcat("{",
"'TCP':'TCP',",
"'UDP':'UDP',",
"'ICMP':'ICMP',",
"'0':'HOPOPT',",
"'1':'ICMP',",
"'2':'IGMP',",
"'3':'GGP',",
"'4':'IPv4',",
"'5':'ST',",
"'6':'TCP',",
"'7':'CBT',",
"'8':'EGP',",
"'9':'IGP',",
"'10':'BBN-RCC-MON',",
"'11':'NVP-II',",
"'12':'PUP',",
"'13':'ARGUS (deprecated)',",
"'14':'EMCON',",
"'15':'XNET',",
"'16':'CHAOS',",
"'17':'UDP',",
"'18':'MUX',",
"'19':'DCN-MEAS',",
"'20':'HMP',",
"'21':'PRM',",
"'22':'XNS-IDP',",
"'23':'TRUNK-1',",
"'24':'TRUNK-2',",
"'25':'LEAF-1',",
"'26':'LEAF-2',",
"'27':'RDP',",
"'28':'IRTP',",
"'29':'ISO-TP4',",
"'30':'NETBLT',",
"'31':'MFE-NSP',",
"'32':'MERIT-INP',",
"'33':'DCCP',",
"'34':'3PC',",
"'35':'IDPR',",
"'36':'XTP',",
"'37':'DDP',",
"'38':'IDPR-CMTP',",
"'39':'TP++',",
"'40':'IL',",
"'41':'IPv6',",
"'42':'SDRP',",
"'43':'IPv6-Route',",
"'44':'IPv6-Frag',",
"'45':'IDRP',",
"'46':'RSVP',",
"'47':'GRE',",
"'48':'DSR',",
"'49':'BNA',",
"'50':'ESP',",
"'51':'AH',",
"'52':'I-NLSP',",
"'53':'SWIPE (deprecated)',",
"'54':'NARP',",
"'55':'MOBILE',",
"'56':'TLSP',",
"'57':'SKIP',",
"'58':'IPv6-ICMP',",
"'59':'IPv6-NoNxt',",
"'60':'IPv6-Opts',",
"'61':'',",
"'62':'CFTP',",
"'63':'',",
"'64':'SAT-EXPAK',",
"'65':'KRYPTOLAN',",
"'66':'RVD',",
"'67':'IPPC',",
"'68':'',",
"'69':'SAT-MON',",
"'70':'VISA',",
"'71':'IPCV',",
"'72':'CPNX',",
"'73':'CPHB',",
"'74':'WSN',",
"'75':'PVP',",
"'76':'BR-SAT-MON',",
"'77':'SUN-ND',",
"'78':'WB-MON',",
"'79':'WB-EXPAK',",
"'80':'ISO-IP',",
"'81':'VMTP',",
"'82':'SECURE-VMTP',",
"'83':'VINES',",
"'84':'TTP',",
"'85':'NSFNET-IGP',",
"'86':'DGP',",
"'87':'TCF',",
"'88':'EIGRP',",
"'89':'OSPFIGP',",
"'90':'Sprite-RPC',",
"'91':'LARP',",
"'92':'MTP',",
"'93':'AX.25',",
"'94':'IPIP',",
"'95':'MICP (deprecated)',",
"'96':'SCC-SP',",
"'97':'ETHERIP',",
"'98':'ENCAP',",
"'99':'',",
"'100':'GMTP',",
"'101':'IFMP',",
"'102':'PNNI',",
"'103':'PIM',",
"'104':'ARIS',",
"'105':'SCPS',",
"'106':'QNX',",
"'107':'A/N',",
"'108':'IPComp',",
"'109':'SNP',",
"'110':'Compaq-Peer',",
"'111':'IPX-in-IP',",
"'112':'VRRP',",
"'113':'PGM',",
"'114':'',",
"'115':'L2TP',",
"'116':'DDX',",
"'117':'IATP',",
"'118':'STP',",
"'119':'SRP',",
"'120':'UTI',",
"'121':'SMP',",
"'122':'SM (deprecated)',",
"'123':'PTP',",
"'124':'ISIS over IPv4',",
"'125':'FIRE',",
"'126':'CRTP',",
"'127':'CRUDP',",
"'128':'SSCOPMCE',",
"'129':'IPLT',",
"'130':'SPS',",
"'131':'PIPE',",
"'132':'SCTP',",
"'133':'FC',",
"'134':'RSVP-E2E-IGNORE',",
"'135':'Mobility Header',",
"'136':'UDPLite',",
"'137':'MPLS-in-IP',",
"'138':'manet',",
"'139':'HIP',",
"'140':'Shim6',",
"'141':'WESP',",
"'142':'ROHC',",
"'143':'Ethernet',",
"'253':'',",
"'254':'',",
"'255':'Reserved',",
"}"));

source
    | extend DstGeoLocation = geo_location(DestinationIP)
    | extend SrcGeoLocation = geo_location(SourceIP)
    | extend RemoteIP = iff(tostring(CommunicationDirection) == "SEND", DestinationIP, SourceIP)
    | extend maliciousIpIndicator = check_malicious_ip(pack_array(RemoteIP), true)
    | extend ThreatIpAddr = tostring(maliciousIpIndicator["IP"])
    | extend AdditionalFields = parsejson(strcat("{",
        "TcpSequenceNumber",":",TcpSequenceNumber,",",
        "TcpAcknowledgement",":",TcpAcknowledgement,",",
        "TcpWindowSize",":",TcpWindowSize,",",
        "Info",":",Info,
        "}"))
    | project
        TimeGenerated = todatetime(strcat(Date, " ", Time)),
        SrcIpAddr = SourceIP,
        SrcPortNumber = toint(SourcePort),
        DstIpAddr = DestinationIP,
        DstPortNumber = toint(DestinationPort),
        SrcBytes = tolong(RequestSizeInBytes),
        EventCount = toint(1),
        EventSchemaVersion = "0.2.4",
        EventType = "EndpointNetworkSession",
        EventProduct = "Windows Firewall",
        EventVendor = "Microsoft",
        DvcHostname = tostring(SourceHostname),
        ThreatCategory = tostring(maliciousIpIndicator["ThreatType"]),
        ThreatName = tostring(maliciousIpIndicator["Description"]),
        EventReportUrl = tostring(maliciousIpIndicator["ReportReferenceLink"]),
        ThreatField = case(ThreatIpAddr == "", "",ThreatIpAddr == DestinationIP, "DstIpAddr",ThreatIpAddr == SourceIP, "SrcIpAddr",""),
        ThreatFirstReportedTime = todatetime(maliciousIpIndicator["FirstReportedDateTime"]),
        ThreatLastReportedTime = todatetime(maliciousIpIndicator["LastReportedDateTime"]),
        ThreatOriginalConfidence =  tostring(maliciousIpIndicator["Confidence"]),
        ThreatOriginalRiskLevel = tostring(maliciousIpIndicator["Severity"]),
        ThreatIsActive  = tobool(maliciousIpIndicator["IsActive"]),
        SrcGeoCountry = tostring(SrcGeoLocation["Country"]),
        SrcGeoLatitude = todouble(SrcGeoLocation["Latitude"]),
        SrcGeoLongitude = todouble(SrcGeoLocation["Longitude"]),
        DstGeoCountry = tostring(DstGeoLocation["Country"]),
        DstGeoLatitude = todouble(DstGeoLocation["Latitude"]),
        DstGeoLongitude = todouble(DstGeoLocation["Longitude"]),
        EventStartTime = todatetime(strcat(Date, " ", Time)),
        EventEndTime = todatetime(strcat(Date, " ", Time)),
        NetworkIcmpCode = toint(IcmpCode),
        NetworkIcmpType = iff(tostring(IcmpType) == "-", NullString, IcmpType),
        DvcOriginalAction = FirewallAction,
        DvcAction = iff(tostring(FirewallAction) == "ALLOW", "Allow", iff(tostring(FirewallAction) == "DROP", "Drop", "NA")),
        NetworkProtocol = tostring(NetworkProtocolMappings[Protocol]),
        NetworkDirection = tostring(NetworkDirectionMappings[CommunicationDirection]),
        TcpFlagsAck = iff(tostring(TcpFlags) contains "A", true, false),
        TcpFlagsFin = iff(tostring(TcpFlags) contains "F", true, false),
        TcpFlagsPsh = iff(tostring(TcpFlags) contains "P", true, false),
        TcpFlagsRst = iff(tostring(TcpFlags) contains "R", true, false),
        TcpFlagsUrg = iff(tostring(TcpFlags) contains "U", true, false),
        TcpFlagsSyn = iff(tostring(TcpFlags) contains "S", true, false),
        EventResult = iff(tostring(FirewallAction) == "ALLOW", "Success", "Failure"),
        EventSeverity = iff(tostring(FirewallAction) == "ALLOW", "Informational", "Low"),
        ThreatIpAddr,
        AdditionalFields,
        SrcGeoRegion = NullString,
        SrcGeoCity = NullString,
        DstGeoRegion= NullString,
        DstGeoCity= NullString,
        EventMessage = NullString,
        EventResultDetails = NullString,
        DvcMacAddr = NullString,
        DvcZone = NullString,
        EventProductVersion = NullString,
        DvcInterface = NullString,
        DvcSubscriptionId = NullString,
        EventOriginalSeverity = NullString,
        EventOriginalSubType = NullString,
        NetworkApplicationProtocol = NullString,
        NetworkProtocolVersion = NullString,
        NetworkConnectionHistory = NullString,
        DstBytes = NullLong,
        NetworkBytes = NullLong,
        DstPackets = NullLong,
        SrcPackets = NullLong,
        NetworkPackets = NullLong,
        NetworkSessionId = NullString,
        DstZone = NullString,
        DstInterfaceName = NullString,
        DstInterfaceGuid = NullString,
        DstMacAddr = NullString,
        DstVlanId = NullString,
        DstSubscriptionId = NullString,
        DstUserId = NullString,
        DstUserIdType = NullString,
        DstUsername = NullString,
        DstUsernameType = NullString,
        DstUserType = NullString,
        DstOriginalUserType = NullString,
        DstAppName = NullString,
        DstAppId = NullString,
        DstAppType = NullString,
        SrcZone = NullString,
        SrcInterfaceName = NullString,
        SrcInterfaceGuid = NullString,
        SrcMacAddr = NullString,
        SrcVlanId = NullString,
        SrcSubscriptionId = NullString,
        SrcAppName = NullString,
        SrcAppId = NullString,
        SrcAppType = NullString,
        DstNatIpAddr = NullString,
        DstNatPortNumber = NullInt,
        SrcNatIpAddr = NullString,
        SrcNatPortNumber = NullInt,
        DvcInboundInterface = NullString,
        DvcOutboundInterface = NullString,
        NetworkRuleName = NullString,
        NetworkRuleNumber = NullInt,
        ThreatId = NullString,
        ThreatRiskLevel = NullInt,
        EventSubType = NullString,
        EventOriginalType = NullString,
        DvcIpAddr = NullString,
        Dvc = NullString,
        DvcDomain = NullString,
        DvcDomainType = NullString,
        DvcOs = NullString,
        DvcOsVersion = NullString,
        EventOriginalUid = NullString,
        DvcFQDN = NullString,
        DvcId = NullString,
        DvcIdType = NullString,
        SrcHostname = NullString,
        SrcDomain = NullString,
        SrcDomainType = NullString,
        SrcFQDN = NullString,
        SrcDvcId = NullString,
        SrcDvcIdType = NullString,
        SrcDeviceType = NullString,
        SrcUserId = NullString,
        SrcUserIdType = NullString,
        SrcUsername = NullString,
        SrcUsernameType = NullString,
        SrcUserType = NullString,
        SrcOriginalUserType = NullString,
        DstHostname = NullString,
        DstDomain = NullString,
        DstDomainType = NullString,
        DstFQDN = NullString,
        DstDvcId = NullString,
        DstDvcIdType = NullString,
        DstDeviceType = NullString,
        NetworkDuration = NullInt,
        DvcDescription = NullString,
        EventOriginalResultDetails = NullString,
        ThreatConfidence = NullInt,
        DstDescription = NullString,
        SrcDescription = NullString