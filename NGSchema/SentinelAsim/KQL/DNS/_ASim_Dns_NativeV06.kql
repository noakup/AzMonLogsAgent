let parser=(disabled:bool=false) 
{
  ASimDnsActivityLogs  | where not(disabled)
    | project-rename
        EventUid = _ItemId
    | extend
        EventEndTime = TimeGenerated,
        EventStartTime = TimeGenerated,
        Dvc = coalesce (Dvc, DvcFQDN, DvcHostname, DvcIpAddr, DvcId, _ResourceId, strcat (EventVendor,'/', EventProduct)),
        Dst = coalesce (DstFQDN, DstHostname, DstIpAddr, DstDvcId),
        Src = coalesce (SrcFQDN, SrcHostname, SrcIpAddr, SrcDvcId),
        EventSchema = "Dns"
    // -- Type fixes
    | extend
        ThreatConfidence = toint(ThreatConfidence),
        ThreatFirstReportedTime = todatetime(ThreatFirstReportedTime),
        ThreatIsActive = tobool(ThreatIsActive),
        ThreatLastReportedTime = todatetime(ThreatLastReportedTime),
        ThreatOriginalRiskLevel = tostring(ThreatOriginalRiskLevel),
        ThreatRiskLevel = toint(ThreatRiskLevel)    
    //  -- Aliases
    | extend
        DnsResponseCodeName=EventResultDetails,
        Domain=DnsQuery,
        IpAddr=SrcIpAddr,
        Duration = DnsNetworkDuration,
        Process = SrcProcessName,
        SessionId = DnsSessionId,
        User = SrcUsername,
        Hostname = SrcHostname,
        DvcScopeId = coalesce(DvcScopeId,_SubscriptionId)
    | project-away
        TenantId, SourceSystem, _ResourceId, _SubscriptionId
};
parser  (disabled=disabled)
