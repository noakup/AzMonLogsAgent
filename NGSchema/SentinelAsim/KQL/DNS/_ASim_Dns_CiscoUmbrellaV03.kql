let DNSQuery_CiscoUmbrella=(disabled:bool=false){
    Cisco_Umbrella_dns_CL | where not(disabled)
    // 
    // *********** Parsing
    | parse QueryType_s with DnsQueryType:int " ("DnsQueryTypeName:string ")"
    //
    | project 
    //
    // ******************* Mandatory
       EventCount=int(1),
       EventStartTime= column_ifexists("Timestamp_t", todatetime(column_ifexists("Timestamp_s",""))),
       EventProduct="Umbrella",
       EventVendor="Cisco",
       EventSchema="Dns",
       EventSchemaVersion="0.1.3",
       Dvc="CiscoUmbrella",
       EventType="Query",
       EventResult=iff(ResponseCode_s=~'NOERROR','Success','Failure'),
       EventResultDetails=ResponseCode_s,  // => ResponseCodeNames
       //
       TimeGenerated, // not handled by schema, but we need to preserve it
       SrcIpAddr=column_ifexists('InternalIp_s', ''),
       EventSubType='response',
  // ********** Renamed columns
       UrlCategory=column_ifexists('Categories_s', ''),
       DnsQuery=trim_end(@'\.',column_ifexists('Domain_s', '')) , 
       ThreatCategory=column_ifexists('Blocked_Categories_s', ''),
       SrcNatIpAddr=column_ifexists('ExternalIp_s', ''),
       DvcAction=column_ifexists('Action_s', ''),
       EventEndTime=todatetime(column_ifexists('Timestamp_t',  column_ifexists('Timestamp_s',"")  )),  
   //
   // *************** keep Parsed data
       DnsQueryType, DnsQueryTypeName
  // **************Aliases
  | extend 
      DnsResponseCodeName=EventResultDetails, 
      DomainCategory=UrlCategory,
      Domain=DnsQuery,
      IpAddr=SrcIpAddr,
      Src=SrcIpAddr
  };
DNSQuery_CiscoUmbrella(disabled)