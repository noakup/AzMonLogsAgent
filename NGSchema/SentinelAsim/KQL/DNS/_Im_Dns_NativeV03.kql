let parser=
(
  starttime:datetime=datetime(null), 
  endtime:datetime=datetime(null),
  srcipaddr:string='*',
  domain_has_any:dynamic=dynamic([]),
  responsecodename:string='*', 
  response_has_ipv4:string='*',
  response_has_any_prefix:dynamic=dynamic([]),
  eventtype:string='Query',
  disabled:bool=false
)
{
  ASimDnsActivityLogs  | where not(disabled)
  //  -- Pre-parsing filtering:
  | where
      (response_has_ipv4=='*') and (array_length(response_has_any_prefix) == 0) // -- Check that unsupported filters are set to default
      and (isnull(starttime) or TimeGenerated >= starttime)
      and (isnull(endtime) or TimeGenerated <= endtime)
      and (srcipaddr=='*' or SrcIpAddr==srcipaddr)
      and (array_length(domain_has_any) ==0 or DnsQuery has_any (domain_has_any))
      and (responsecodename=='*' or EventResultDetails == responsecodename)
      and (eventtype == "*" or eventtype == EventType or (eventtype == "lookup" and EventType == "Query")) // -- Support "lookup" as value for backward compatibility
  // --
  | extend
      EventStartTime = TimeGenerated,
      EventEndTime = TimeGenerated,
      EventSchema = "Dns",
      EventSchemaVersion="0.1.3"
  //  -- Aliases here
  | extend
      Dvc = DvcHostname,
      DnsResponseCodeName=EventResultDetails,
      Domain=DnsQuery,
      IpAddr=SrcIpAddr,
      Src=SrcIpAddr,
      SessionId=DnsSessionId,
      Duration = DnsNetworkDuration,
      Process = SrcProcessName,
      User = SrcUsername,
      Hostname = SrcHostname
};
parser (starttime, endtime, srcipaddr, domain_has_any, responsecodename, response_has_ipv4, response_has_any_prefix, eventtype, disabled)
