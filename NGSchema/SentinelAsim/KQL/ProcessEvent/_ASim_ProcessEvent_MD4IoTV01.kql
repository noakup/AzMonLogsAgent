let ProcessEvents_MD4IoT=()
{
  SecurityIoTRawEvent | where not(disabled)
  | where RawEventName == "Process"
  | extend
    EventDetails = todynamic(EventDetails)
  | extend 
    DvcOs = iif (EventDetails.MessageSource == "Linux", "Linux", "Windows") // Intermediate fix
  | extend 
    EventOriginalUid = tostring(EventDetails.OriginalEventId), 
    EventCount = toint(EventDetails.HitCount), 
    EventProduct = 'Azure Defender for IoT', 
    EventVendor = 'Microsoft', 
    EventSchemaVersion = '0.1.0', 
    EventSchema = 'ProcessEvent',
    EventStartTime = todatetime(EventDetails.TimestampUTC), 
    EventEndTime = todatetime(TimeGenerated), 
    EventType = iff (EventDetails.EventType == 'EXIT', 'ProcessTerminate', 'ProcessCreated'), 
    EventSubType = tostring(EventDetails.EventType),
    EventResult = 'Success', 
    TargetProcessId = tostring(EventDetails.ProcessId), 
    TargetProcessCommandLine = coalesce (tostring(EventDetails.Commandline), tostring(EventDetails.Executable)), 
    TargetProcessName = coalesce (tostring(EventDetails.Executable), split(EventDetails.Commandline," ")[0]),
    TargetUsernameType = iif (DvcOs == "Windows", "Windows", "Simple"), 
    TargetUsername = iff (DvcOs == "Windows", tostring(EventDetails.UserName), ""), 
    ActingProcessId = iff (DvcOs == "Windows", tostring(EventDetails.ParentProcessId), "") 
  | project-rename
      DvcHostname = DeviceId,
      EventProductVersion = AgentVersion, // Not available in Windows
    _ResourceId = AssociatedResourceId, 
    _SubscriptionId = AzureSubscriptionId 
  | extend 
      // -- aliases
    User = TargetUsername, 
    CommandLine = TargetProcessCommandLine, 
    Process = TargetProcessName, 
    Dvc = DvcHostname 
  };
  ProcessEvents_MD4IoT
