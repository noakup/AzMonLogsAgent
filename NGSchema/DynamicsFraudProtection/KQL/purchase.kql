source
| extend req = parse_json(request) 
| extend resp= parse_json(response)
| extend meta = parse_json(metadata)
| project   
PurchaseId = tostring(req.purchaseId),
AssessmentType = tostring(req.assessmentType),
OriginalOrderId = tostring(req.originalOrderId),
MerchantLocalDate = todatetime(req.merchantLocalDate),
MerchantIdentifier = tostring(req.merchantIdentifier),
MerchantCategoryCode = tostring(req.merchantCategoryCode),
MerchantBusinessType = tostring(req.merchantBusinessType),
MerchantBusinessSegment = tostring(req.merchantBusinessSegment),
IsTest = tobool(req.isTest),
IsFreeProdIncluded = tobool(req.isFreeProductIncluded),
IsRecurringCharge = tobool(req.isRecurringCharge),
IsGuestCheckout = tobool(req.isGuestCheckout),
IsRetryOrder = tobool(req.isRetryOrder),
IsPostpaid =  tobool( req.isPostpaid),
DistinctItemCount = toint(req.distinctItemCount) ,
TotalItemCount = toint(req.totalItemCount),
OrderType = tostring(req.orderType),
DiscountAmount =  todouble(req.discountAmount),
TotalAmount = todouble(req.totalAmount),
Currency = tostring(req.currency),
ShippingMethod = tostring(req.shippingMethod),
TxnProcessingOrder = tostring(req.transactionProcessingOrder),
RecurringChargeSequence = tostring(req.recurringChargeSequence),
MidName = tostring(req.midName),
TxnDescription = tostring(req.transactionDescription),
ShippingEmail = tostring(req.shippingEmail),
CustomData = todynamic(req.customData),
OrderInitiatedChannel = tostring(req.orderInitiatedChannel),
OrderInitiatedChannelName = tostring(req.orderInitiatedChannelName),
MerchantBusinessSegmentL2 = tostring(req.merchantBusinessSegmentL2),
UserUserId = tostring(req.user.userId),
UserCreationDate = todatetime(req.user.creationDate),
UserFirstName = tostring(req.user.firstName),
UserLastName = tostring(req.user.lastName),
UserCountry = tostring(req.user.country),
UserZipCode = tostring(req.user.zipCode),
UserPhoneNumber = tostring(req.user.phoneNumber),
UserEmail = tostring(req.user.email),
UserProfileType = tostring(req.user.profileType),
UserAuthProvider = tostring(req.user.authenticationProvider),
UserAuthMethod = tostring(req.user.authenticationMethod),
UserLoginInputMethod = tostring(req.user.loginInputMethod),
UserLoginChlngType = tostring(req.user.loginChallengeType),
DvcContextDvcContextId = tostring(req.deviceContext.deviceContextId),
DvcContextProvider = tostring(req.deviceContext.provider),
DvcContextExternalDvcType = tostring(req.deviceContext.externalDeviceType),
DvcContextIpAddress = tostring(req.deviceContext.ipAddress),
ExternalDvcAttrOs = tostring(req.externalDeviceAttributes.os),
OrgLevel1OrgId = tostring(req.organizationLevel1.organizationId),
OrgLevel1Name = tostring(req.organizationLevel1.name),
OrgLevel1ZipCode = tostring(req.organizationLevel1.zipCode),
OrgLevel1State = tostring(req.organizationLevel1.state),
OrgLevel1CountryISO = tostring(req.organizationLevel1.countryISO),
OrgLevel2OrgId = tostring(req.organizationLevel1.organizationId),
OrgLevel2Name = tostring(req.organizationLevel1.name),
OrgLevel2ZipCode = tostring(req.organizationLevel1.zipCode),
OrgLevel2State = tostring(req.organizationLevel1.state),
OrgLevel2CountryISO = tostring(req.organizationLevel1.countryISO),
OrgLevel3OrgId = tostring(req.organizationLevel1.organizationId),
OrgLevel3Name = tostring(req.organizationLevel1.name),
OrgLevel3ZipCode = tostring(req.organizationLevel1.zipCode),
OrgLevel3State = tostring(req.organizationLevel1.state),
OrgLevel3CountryISO = tostring(req.organizationLevel1.countryISO), 
ThreeDSIsThreeDSAuth = tobool(req.threeDS.isThreeDSAuth),
ThreeDSMessageCategory = tostring(req.threeDS.messageCategory),
ThreeDSTransStatus = tostring(req.threeDS.transStatus),
ThreeDSTransStatusReason = tostring(req.threeDS.transStatusReason),
ThreeDSAcsChlngMandated = tostring(req.threeDS.acsChallengeMandated),
ThreeDSChlngCompletionInd = tostring(req.threeDS.challengeCompletionInd),
ShippingAddressCity = tostring(req.shippingAddress.city),
ShippingAddressZipCode = tostring(req.shippingAddress.zipCode),
ShippingAddressCountry = tostring(req.shippingAddress.country),
StoreStoreId = tostring(req.store.storeId),
StoreStoreName = tostring(req.store.storeName),
StoreAddressZipCode = tostring(req.store.address.zipCode),
StoreAddressCountry = tostring(req.store.address.country),
RecipientUserId = tostring(req.recipientUser.userId),
RecipientFirstName = tostring(req.recipientUser.firstName),
RecipientLastName = tostring(req.recipientUser.lastName),
RecipientCountry = tostring(req.recipientUser.country),
RecipientZipCode = tostring(req.recipientUser.zipCode),
RecipientEmail = tostring(req.recipientUser.email),
RecipientProfileType = tostring(req.recipientUser.profileType),
RecipientLoginInputMethod = tostring(req.recipientUser.loginInputMethod),
PICount = array_length(req.paymentInstrumentList),
PI0PymntMethod = tostring(req.paymentInstrumentList[0].paymentMethod),
PI0Type = tostring(req.paymentInstrumentList[0].type),
PI0PymntCheckoutProvider = tostring(req.PaymentInstrumentList[0].paymentCheckoutProvider),
PI0CardType = tostring(req.paymentInstrumentList[0].cardType),
PI0Bin = tostring(req.paymentInstrumentList[0].bin),
PI0BinName = tostring(req.PaymentInstrumentList[0].binName),
PI0BinCountryISO = tostring(req.paymentInstrumentList[0].binCountryISO),
PI0BinCardType = tostring(req.paymentInstrumentList[0].binCardType),
PI0BinCardAssociation = tostring(req.paymentInstrumentList[0].binCardAssociation),
PI0BinBankGroup = tostring(req.paymentInstrumentList[0].binBankGroup),
PI0LastFourDigits = tostring(req.paymentInstrumentList[0].lastFourDigits),
PI0Email = tostring(req.paymentInstrumentList[0].email),
PI0AuthzType = tostring(req.paymentInstrumentList[0].authorizationType),
PI0AuthzResultCode = tostring(req.paymentInstrumentList[0].authorizationResultCode),
PI0AuthzResultText = tostring(req.paymentInstrumentList[0].authorizationResultText),
PI0BillingAddressZipCode	=	tostring( req.paymentInstrumentList[0].billingAddress.zipCode),
PI0BillingAddressCountry = tostring(req.paymentInstrumentList[0].billingAddress.country),
PI1PymntMethod = tostring(req.paymentInstrumentList[1].paymentMethod),
PI1Type = tostring(req.paymentInstrumentList[1].type),
PI1PymntCheckoutProvider = tostring(req.PaymentInstrumentList[1].paymentCheckoutProvider),
PI1CardType = tostring(req.paymentInstrumentList[1].cardType),
PI1Bin = tostring(req.paymentInstrumentList[1].bin),
PI1BinName = tostring(req.PaymentInstrumentList[1].binName),
PI1BinCountryISO = tostring(req.paymentInstrumentList[1].binCountryISO),
PI1BinCardType = tostring(req.paymentInstrumentList[1].binCardType),
PI1BinCardAssociation = tostring(req.paymentInstrumentList[1].binCardAssociation),
PI1BinBankGroup = tostring(req.paymentInstrumentList[1].binBankGroup),
PI1LastFourDigits = tostring(req.paymentInstrumentList[1].lastFourDigits),
PI1Email = tostring(req.paymentInstrumentList[1].email),
PI1AuthzType = tostring(req.paymentInstrumentList[1].authorizationType),
PI1AuthzResultCode = tostring(req.paymentInstrumentList[1].authorizationResultCode),
PI1AuthzResultText = tostring(req.paymentInstrumentList[1].authorizationResultText),
PI1BillingAddressZipCode = tostring(req.paymentInstrumentList[1].billingAddress.zipCode),
PI1BillingAddressCountry = tostring(req.paymentInstrumentList[1].billingAddress.country),
PI2PymntMethod = tostring(req.paymentInstrumentList[2].paymentMethod),
PI2Type = tostring(req.paymentInstrumentList[2].type),
PI2PymntCheckoutProvider = tostring(req.PaymentInstrumentList[2].paymentCheckoutProvider),
PI2CardType = tostring(req.paymentInstrumentList[2].cardType),
PI2Bin = tostring(req.paymentInstrumentList[2].bin),
PI2BinName = tostring(req.PaymentInstrumentList[2].binName),
PI2BinCountryISO = tostring(req.paymentInstrumentList[2].binCountryISO),
PI2BinCardType = tostring(req.paymentInstrumentList[2].binCardType),
PI2BinCardAssociation = tostring(req.paymentInstrumentList[2].binCardAssociation),
PI2BinBankGroup = tostring(req.paymentInstrumentList[2].binBankGroup),
PI2LastFourDigits = tostring(req.paymentInstrumentList[2].lastFourDigits),
PI2Email = tostring(req.paymentInstrumentList[2].email),
PI2AuthzType = tostring(req.paymentInstrumentList[2].authorizationType),
PI2AuthzResultCode = tostring(req.paymentInstrumentList[2].authorizationResultCode),
PI2AuthzResultText = tostring(req.paymentInstrumentList[2].authorizationResultText),
PI2BillingAddressZipCode = tostring(req.paymentInstrumentList[2].billingAddress.zipCode),
PI2BillingAddressCountry = tostring(req.paymentInstrumentList[2].billingAddress.country),
Prod0ProdId = tostring(req.productList[0].productId),
Prod0ProdName = tostring(req.productList[0].productName),
Prod0Type = tostring(req.productList[0].type),
Prod0Category = tostring(req.productList[0].category),
Prod0MerchantProdCategory = tostring(req.productList[0].merchantProductCategory),
Prod0Market = tostring(req.productList[0].market),
Prod0IsRecurring = tobool(req.productList[0].isRecurring),
Prod0IsFree = tobool(req.productList[0].isFree),
Prod0Quantity = toint(req.productList[0].quantity),
Prod1ProdId = tostring(req.productList[1].productId),
Prod1ProdName = tostring(req.productList[1].productName),
Prod1Type = tostring(req.productList[1].type),
Prod1Category = tostring(req.productList[1].category),
Prod1MerchantProdCategory = tostring(req.productList[1].merchantProductCategory),
Prod1Market = tostring(req.productList[1].market),
Prod1IsRecurring = tobool(req.productList[1].isRecurring),
Prod1IsFree = tobool(req.productList[1].isFree),
Prod1Quantity	=	 toint(req.productList[1].quantity),	
Prod2ProdId = tostring(req.productList[2].productId),
Prod2ProdName = tostring(req.productList[2].productName),
Prod2Type = tostring(req.productList[2].type),
Prod2Category = tostring(req.productList[2].category),
Prod2MerchantProdCategory = tostring(req.productList[2].merchantProductCategory),
Prod2Market = tostring(req.productList[2].market),
Prod2IsRecurring = tobool(req.productList[2].isRecurring),
Prod2IsFree = tobool(req.productList[2].isFree),
Prod2Quantity = toint(req.productList[2].quantity),
ProdCount = array_length(req.productList),
MerchantRuleDecision = tostring(resp.MerchantRuleDecision),
MIDFlag = tostring(resp.MIDFlag),
RiskScore = toint(resp.RiskScore),
ReasonCodes = tostring(resp.ReasonCodes),
PolicyApplied = tostring(resp.PolicyApplied),
RuleEvaluations = todynamic(resp.RuleEvaluations),
ClauseName = tostring(resp.ClauseName),
DvcAttrUserAgntType = tostring(resp.DeviceAttributes.UserAgentType),
DvcAttrBrowserAgntLangs = tostring(resp.DeviceAttributes.BrowserUserAgentLangua),
DvcAttrBrowserAgnt = tostring(resp.DeviceAttributes.BrowserUserAgent),
DvcAttrCarrier = tostring(resp.DeviceAttributes.Carrier),
DvcAttrDvcCity	= tostring(resp.DeviceAttributes.DeviceCity),
DvcAttrDvcCountryCode =	tostring(resp.DeviceAttributes.DeviceCountryCode),
DvcAttrCookieEnabled = tostring(resp.DeviceAttributes.CookieEnabled),
DvcAttrJavaScriptEnabled = tostring(resp.DeviceAttributes.JavaScriptEnabled),
DvcAttrDvcId = tostring(resp.DeviceAttributes.DeviceId),
DvcAttrMimeTypesCount = toint(resp.DeviceAttributes.MimeTypesCount),
DvcAttrPlatform = tostring(resp.DeviceAttributes.Platform),
DvcAttrFontsCount = toint(resp.DeviceAttributes.FontsCount),
DvcAttrPlugins = tostring(resp.DeviceAttributes.Plugins),
DvcAttrPluginsCount = toint(resp.DeviceAttributes.PluginsCount),
DvcAttrDvcPostalCode = tostring(resp.DeviceAttributes.DevicePostalCode),
DvcAttrScreenResolution = tostring(resp.DeviceAttributes.ScreenResolution),
DvcAttrDvcState = tostring(resp.DeviceAttributes.DeviceState),
DvcAttrTimeZoneOffset =	toint(resp.DeviceAttributes.TimeZoneOffset),
DvcAttrTrueIp = tostring(resp.DeviceAttributes.TrueIp),
DvcAttrProxy = tostring(resp.DeviceAttributes.Proxy),
BankName = tostring(resp.BankName),
DfpEnvironmentId = tostring(meta.tenantId),
PaymentInstrumentList = todynamic(req.paymentInstrumentList),
ProductList = todynamic(req.productList), 
AadTenantId =  tostring(meta.tenantId),
TimeGenerated = now(),
OperationName = tostring(name),
CorrelationId =  uniqueId
