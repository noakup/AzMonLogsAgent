let ParamTimeStart = iff((isnull(TimeStart)), ago(1d), TimeStart);
let ParamTimeEnd = iff((isnull(TimeEnd)), now(), TimeEnd);
let ParamResourceId = iff(isnull(ResourceId) or trim(" ", ResourceId) == "", "", ResourceId);
let existsResource=iff( ParamResourceId == "" , false, true);
let existsGenericTableData = toscalar(
    AzureDiagnostics
    | where TimeGenerated >= ParamTimeStart and TimeGenerated <= ParamTimeEnd
    | where Category == 'PostgreSQLFlexSessions'
    | where iff(existsResource,_ResourceId =~ ParamResourceId, true)
    | take 1
    | summarize count()
    | project iff(count_ == 0, false, true)
);
let existsDedicatedTableData = toscalar(
    PGSQLPgStatActivitySessions
    | where TimeGenerated >= ParamTimeStart and TimeGenerated <= ParamTimeEnd
    | where iff(existsResource,_ResourceId =~ ParamResourceId, true)
    | take 1
    | summarize count()
    | project iff(count_ == 0, false, true)
);
let GenericData = AzureDiagnostics
| where TimeGenerated >= ParamTimeStart and TimeGenerated <= ParamTimeEnd
| where Category == 'PostgreSQLFlexSessions'
| where iff(existsGenericTableData==true, true, false)
| where iff(existsResource,_ResourceId =~ ParamResourceId, true)
| project
TimeGenerated,
_ResourceId,
// building columns to match the dedicated table
DatabaseId = toint(
    iff(isnotempty(AdditionalFields.Datid), AdditionalFields.Datid,
        column_ifexists('Datid_d',
            column_ifexists('Datid_s',
                column_ifexists('Datid', "")
            )
        )
    )
),
DatabaseName = tostring(
    iff(isnotempty(AdditionalFields.Database_name), AdditionalFields.Database_name,
        column_ifexists('Database_name_s',
            column_ifexists('Database_name', "")
        )
    )
),
ProcessId = toint(
    iff(isnotempty(AdditionalFields.Pid), AdditionalFields.Pid,
        column_ifexists('Pid_d',
            column_ifexists('Pid', "")
        )
    )
),
UserId = toint(
    iff(isnotempty(AdditionalFields.Usesysid), AdditionalFields.Usesysid,
        column_ifexists('Usesysid_d',
            column_ifexists('Usesysid_s',
                column_ifexists('Usesysid', "")
            )
        )
    )
),
ApplicationName = tostring(
    iff(isnotempty(AdditionalFields.Application_name), AdditionalFields.Application_name,
        column_ifexists('Application_name_s',
            column_ifexists('Application_name', "")
        )
    )
),
ClientIpAddress = tostring(
    iff(isnotempty(AdditionalFields.Client_addr), AdditionalFields.Client_addr,
        column_ifexists('Client_addr_s',
            column_ifexists('Client_addr', "")
        )
    )
),
State = tostring(
    iff(isnotempty(AdditionalFields.State), AdditionalFields.State,
        column_ifexists('State_s',
            column_ifexists('State', "")
        )
    )
),
WaitEventType = tostring(
    iff(isnotempty(AdditionalFields.Wait_event_type), AdditionalFields.Wait_event_type,
        column_ifexists('Wait_event_type_s',
            column_ifexists('Wait_event_type', "")
        )
    )
),
WaitEvent = tostring(
    iff(isnotempty(AdditionalFields.Wait_event), AdditionalFields.Wait_event,
        column_ifexists('Wait_event_s',
            column_ifexists('Wait_event', "")
        )
    )
),
BackendStartTime = todatetime(
    iff(isnotempty(AdditionalFields.Backend_start), AdditionalFields.Backend_start,
        column_ifexists('Backend_start_t',
            column_ifexists('Backend_start',
                column_ifexists('Backend_start_s', "")
            )
        )
    )
),
TransactionStartTime = todatetime(
    iff(isnotempty(AdditionalFields.Xact_start), AdditionalFields.Xact_start,
        column_ifexists('Xact_start_t',
            column_ifexists('Xact_start_s',
                column_ifexists('Xact_start', "")
            )
        )
    )
),
QueryStartTime = todatetime(
    iff(isnotempty(AdditionalFields.Query_start), AdditionalFields.Query_start,
        column_ifexists('Query_start_t',
            column_ifexists('Query_start_s',
                column_ifexists('Query_start', "")
            )
        )
    )
),
StateChangeTime = todatetime(
    iff(isnotempty(AdditionalFields.State_change), AdditionalFields.State_change,
        column_ifexists('State_change_t',
            column_ifexists('State_change_s',
                column_ifexists('State_change', "")
            )
        )
    )
),
CollectionTime = todatetime(
    iff(isnotempty(AdditionalFields.Collection_time), AdditionalFields.Collection_time,
        column_ifexists('Collection_time_t',
            column_ifexists('Collection_time_s',
                column_ifexists('Collection_time', "")
            )
        )
    )
),
TransactionId = tolong(
    iff(isnotempty(AdditionalFields.Backend_xid), AdditionalFields.Backend_xid,
        column_ifexists('Backend_xid_d',
            column_ifexists('Backend_xid_s',
                column_ifexists('Backend_xid', "")
            )
        )
    )
),
OldestTransactionId = tolong(
    iff(isnotempty(AdditionalFields.Backend_xmin), AdditionalFields.Backend_xmin,
        column_ifexists('Backend_xmin_d',
            column_ifexists('Backend_xmin_s',
                column_ifexists('Backend_xmin', "")
            )
        )
    )
),
BackendType = tostring(
    iff(isnotempty(AdditionalFields.Backend_type), AdditionalFields.Backend_type,
        column_ifexists('Backend_type_s',
            column_ifexists('Backend_type', "")
        )
    )
);
let DedicatedData = PGSQLPgStatActivitySessions
| where TimeGenerated >= ParamTimeStart and TimeGenerated <= ParamTimeEnd
| where iff(existsDedicatedTableData==true, true, false)
| where iff(existsResource,_ResourceId =~ ParamResourceId, true);
DedicatedData
| union isfuzzy=true GenericData