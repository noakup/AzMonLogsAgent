let ParamTimeStart = iff((isnull(TimeStart)), ago(1d), TimeStart);
let ParamTimeEnd = iff((isnull(TimeEnd)), now(), TimeEnd);
let ParamResourceId = iff(isnull(ResourceId) or trim(" ", ResourceId) == "", "", ResourceId);
let existsResource=iff( ParamResourceId == "" , false, true);
let existsGenericTableData = toscalar(
    AzureDiagnostics
    | where TimeGenerated >= ParamTimeStart and TimeGenerated <= ParamTimeEnd
    | where Category == 'PostgreSQLLogs'
    | where iff(existsResource,_ResourceId =~ ParamResourceId, true)
    | take 1
    | summarize count()
    | project iff(count_ == 0, false, true)
);
let existsDedicatedTableData = toscalar(
    PGSQLServerLogs
    | where TimeGenerated >= ParamTimeStart and TimeGenerated <= ParamTimeEnd
    | where iff(existsResource,_ResourceId =~ ParamResourceId, true)
    | take 1
    | summarize count()
    | project iff(count_ == 0, false, true)
);
let GenericData = AzureDiagnostics
| where TimeGenerated >= ParamTimeStart and TimeGenerated <= ParamTimeEnd
| where Category == 'PostgreSQLLogs'
| where iff(existsGenericTableData==true, true, false)
| where iff(existsResource,_ResourceId =~ ParamResourceId, true)
| project
TimeGenerated,
_ResourceId,
// building columns to match the dedicated table
LogicalServerName = tostring(
    iff(isnotempty(AdditionalFields.LogicalServerName), AdditionalFields.LogicalServerName,
        column_ifexists('LogicalServerName_s',
           column_ifexists('LogicalServerName', "")
        )
    )
),
ReplicaRole = tostring(
    iff(isnotempty(AdditionalFields.ReplicaRole), AdditionalFields.ReplicaRole,
        column_ifexists('ReplicaRole_s',
           column_ifexists('ReplicaRole', "")
        )
    )
),
ProcessId = toint(
    iff(isnotempty(AdditionalFields.processId), AdditionalFields.processId,
        column_ifexists('processId_d',
            column_ifexists('processId_s',
                column_ifexists('processId', "")
            )
        )
    )
),
ErrorLevel = tostring(
    iff(isnotempty(AdditionalFields.errorLevel), AdditionalFields.errorLevel,
        column_ifexists('errorLevel_s',
           column_ifexists('errorLevel', "")
        )
    )
),
SqlErrorCode = tostring(
    iff(isnotempty(AdditionalFields.sqlerrcode), AdditionalFields.sqlerrcode,
        column_ifexists('sqlerrcode_s',
           column_ifexists('sqlerrcode', "")
        )
    )
),
Message = tostring(
    iff(isnotempty(AdditionalFields.message), AdditionalFields.message,
        column_ifexists('Message',
           column_ifexists('message_s', "")
        )
    )
),
Detail = tostring(
    iff(isnotempty(AdditionalFields.detail), AdditionalFields.detail,
        column_ifexists('detail_s',
           column_ifexists('detail', "")
        )
    )
),
DetailLog = tostring(
    iff(isnotempty(AdditionalFields.detail_log), AdditionalFields.detail_log,
        column_ifexists('detail_log_s',
           column_ifexists('detail_log', "")
        )
    )
),
Hint = tostring(
    iff(isnotempty(AdditionalFields.hint), AdditionalFields.hint,
        column_ifexists('hint_s',
           column_ifexists('hint', "")
        )
    )
),
Query = tostring(
    iff(isnotempty(AdditionalFields.query), AdditionalFields.query,
        column_ifexists('query_s',
           column_ifexists('query', "")
        )
    )
),
Context = tostring(
    iff(isnotempty(AdditionalFields.context), AdditionalFields.context,
        column_ifexists('context_s',
           column_ifexists('context', "")
        )
    )
),
Statement = tostring(
    iff(isnotempty(AdditionalFields.statement), AdditionalFields.statement,
        column_ifexists('statement_s',
           column_ifexists('statement', "")
        )
    )
),
SchemaName = tostring(
    iff(isnotempty(AdditionalFields.schema_name), AdditionalFields.schema_name,
        column_ifexists('schema_name_s',
           column_ifexists('schema_name', "")
        )
    )
),
TableName = tostring(
    iff(isnotempty(AdditionalFields.table_name), AdditionalFields.table_name,
        column_ifexists('table_name_s',
           column_ifexists('table_name', "")
        )
    )
),
ColumnName = tostring(
    iff(isnotempty(AdditionalFields.column_name), AdditionalFields.column_name,
        column_ifexists('column_name_s',
           column_ifexists('column_name', "")
        )
    )
),
DatatypeName = tostring(
    iff(isnotempty(AdditionalFields.datatype_name), AdditionalFields.datatype_name,
        column_ifexists('datatype_name_s',
           column_ifexists('datatype_name', "")
        )
    )
),
ConstraintName = tostring(
    iff(isnotempty(AdditionalFields.constraint_name), AdditionalFields.constraint_name,
        column_ifexists('constraint_name_s',
           column_ifexists('constraint_name', "")
        )
    )
),
BackendType = tostring(
    iff(isnotempty(AdditionalFields.backend_type), AdditionalFields.backend_type,
        column_ifexists('backend_type_s',
           column_ifexists('backend_type', "")
        )
    )
);
let DedicatedData = PGSQLServerLogs
| where TimeGenerated >= ParamTimeStart and TimeGenerated <= ParamTimeEnd
| where iff(existsDedicatedTableData==true, true, false)
| where iff(existsResource,_ResourceId =~ ParamResourceId, true);
DedicatedData
| union isfuzzy=true GenericData