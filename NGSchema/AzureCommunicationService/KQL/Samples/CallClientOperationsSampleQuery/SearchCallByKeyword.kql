// Set queryConditions_keyword to be the searching keyword. It can be CallId, ParticipantId, 
// Identifier or any other column values in ACSCallSummary log. If not set, the query will return all calls.
// Note this query is used in Call Diagnostics to search calls based on selected filters.
declare query_parameters(queryConditions_keyword: string = '',
    queryConditions_eventType: string = '',
    queryConditions_startTime: string = '',
    queryConditions_endTime: string = '');
let callIdsFromServiceLog = 
    ACSCallSummary
    | where isempty(queryConditions_startTime) or CallStartTime >= todatetime(queryConditions_startTime)
    | extend CallEndTime = CallStartTime + totimespan(strcat(tostring(CallDuration), 's'))
    | where isempty(queryConditions_endTime) or CallEndTime <= todatetime(queryConditions_endTime)
    | where isempty(queryConditions_keyword) or * contains queryConditions_keyword
    | distinct CorrelationId, ParticipantId, CallStartTime
    | where isnotempty(CallStartTime) and isnotempty(CorrelationId)
    | extend Priority = 0;
let callIdsFromClientLog = 
    ACSCallClientOperations
    | where isnotempty(CallId) and isnotempty(ParticipantId)
    | where isempty(queryConditions_startTime) or CallClientTimeStamp >= todatetime(queryConditions_startTime)
    | where isempty(queryConditions_endTime) or CallClientTimeStamp <= todatetime(queryConditions_endTime)
    | where isempty(queryConditions_keyword) or * contains queryConditions_keyword
    | extend State = tostring(OperationPayload.NewState)
    | where OperationName in ('Join', 'StartCall', 'EnterCall', 'Hangup', 'AcceptIncomingCall') or State in ('Connected', 'Disconnected')
    | extend 
        CallStartTime = iff(OperationName in ('Join', 'StartCall', 'EnterCall', 'AcceptIncomingCall') or State == 'Connected', CallClientTimeStamp, datetime(null))
    | summarize 
        CallStartTime = coalesce(min(CallStartTime), min(CallClientTimeStamp))
        by CorrelationId = CallId, ParticipantId
    | extend Priority = 1;
let callIds = materialize((union callIdsFromServiceLog, callIdsFromClientLog)
    | summarize arg_min(Priority, *) by CorrelationId, ParticipantId
    | order by CallStartTime, CorrelationId desc 
    | extend Rank=row_rank_dense(CorrelationId)
    // UI can't hanlde too many records. We limit to 50k records.
    // This will also make sure in() operator can be used in the next steps without hitting the 1M limit.
    | where Rank <= 50000);
let searchTimeLowerBound = toscalar(callIds | summarize min(CallStartTime)) - 3h;
let searchTimeUpperBound = toscalar(callIds | summarize max(CallStartTime)) + 3h;
let relatedCalls = materialize(callIds | where isnotempty(CorrelationId) | distinct CorrelationId);
let relatedParticipants = materialize(callIds | where isnotempty(ParticipantId) | distinct ParticipantId);
let searchedCalls = 
    materialize(union
        // Service side callIds
        (
        ACSCallSummary
        | where CallStartTime between (searchTimeLowerBound..searchTimeUpperBound)
        | where CorrelationId in (relatedCalls)
        | extend CallEndTime = CallStartTime + totimespan(strcat(tostring(CallDuration), 's'))
        | where CorrelationId != ParticipantId
        | extend ParticipantId = coalesce(ParticipantId, Identifier, EndpointId)
        | extend ParticipantId = iff(ParticipantId == 'Redacted', strcat('RedactedParticipant-', EndpointType, '-Identifier-', Identifier), ParticipantId)
        | extend EndpointId = iff(EndpointId == 'Redacted', strcat('RedactedEndpoint-', EndpointType, '-Identifier-', Identifier), EndpointId)
        | summarize hint.strategy = shuffle CallStartTime = take_any(CallStartTime), CallEndTime = take_any(CallEndTime), CallType = take_any(CallType),
            numOfDroppedParticipant = count_distinctif(ParticipantId, ResultCategory contains 'Unexpected')
            by CorrelationId
        | extend Priority = 0),
        // Client side callIds
        (
        ACSCallClientOperations
        | where CallClientTimeStamp between (searchTimeLowerBound..searchTimeUpperBound)
        | where isnotempty(CallId) and isnotempty(ParticipantId)
        | where CallId in (relatedCalls)
        | extend State = tostring(OperationPayload.NewState)
        | extend 
            CallStartTime = iff(OperationName in ('Join', 'StartCall', 'EnterCall', 'AcceptIncomingCall') or State == 'Connected', CallClientTimeStamp, datetime(null)),
            CallEndTime = iff(OperationName == 'Hangup' or State == 'Disconnected', CallClientTimeStamp, datetime(null)),
            CallType = tostring(OperationPayload.CallType)
        | summarize 
            CallStartTime = min(CallStartTime), 
            CallEndTime = max(CallEndTime),
            CallStartTimeBackup = min(CallClientTimeStamp),
            CallEndTimeBackup = max(CallClientTimeStamp),
            numOfDroppedParticipant = count_distinctif(ParticipantId, OperationName in ('Join', 'StartCall', 'EnterCall', 'Hangup', 'AcceptIncomingCall') and ResultType contains 'Unexpected'),
            CallType = take_any(CallType)
            by CorrelationId = CallId
        | extend
            CallStartTime = coalesce(CallStartTime, CallStartTimeBackup),
            CallEndTime = coalesce(CallEndTime, CallEndTimeBackup),
            Priority = 1
        | project CallStartTime, CallEndTime, CallType, numOfDroppedParticipant, CorrelationId, Priority)
    | summarize arg_min(Priority, *) by CorrelationId);
// client type
let allParticipants = materialize(ACSCallSummary
    | where CallStartTime between (searchTimeLowerBound..searchTimeUpperBound)
    | where CorrelationId != ParticipantId
    | extend ParticipantId = coalesce(ParticipantId, Identifier, EndpointId)
    | extend ParticipantId = iff(ParticipantId == 'Redacted', strcat('RedactedParticipant-', EndpointType, '-Identifier-', Identifier), ParticipantId)
    | extend EndpointId = iff(EndpointId == 'Redacted', strcat('RedactedEndpoint-', EndpointType, '-Identifier-', Identifier), EndpointId)
    | where CorrelationId in (relatedCalls)
    | union (
        ACSCallClientOperations
        | where OperationName !in ('CallModeChanged', 'IdChanged', 'RoleChanged')
        | where CallClientTimeStamp between (searchTimeLowerBound..searchTimeUpperBound)
        | where CallId in (relatedCalls)
        | where isnotempty(ParticipantId)
        | distinct ParticipantId, CorrelationId = CallId, EndpointType = 'VoIP', ParticipantType = 'ACS')
| summarize hint.strategy = shuffle take_any(EndpointType), take_any(ParticipantType), take_any(OsVersion), take_any(SdkVersion) by ParticipantId, CorrelationId);
let ParticipantTypeInfo = materialize(allParticipants
| summarize hint.strategy = shuffle count() by ParticipantType, CorrelationId
| extend participantTypeInfo = strcat(count_, ' ', ParticipantType) 
| summarize hint.strategy = shuffle 
ParticipantTypeSummaryInfo = make_list(participantTypeInfo, 100) by CorrelationId 
| extend ParticipantType = strcat_array(ParticipantTypeSummaryInfo, ', ')
| project CorrelationId, ParticipantType);
let OsInfo = materialize(allParticipants
| summarize hint.strategy = shuffle count() by OsVersion, CorrelationId
| extend OsVersionStr = iff(isnotempty(OsVersion), OsVersion, 'Unknown')
| extend osVersionInfo = strcat(count_, ' ', OsVersionStr)
| summarize hint.strategy = shuffle 
OsVersionSummaryInfo = make_list(osVersionInfo, 100) by CorrelationId 
| extend OsVersion = strcat_array(OsVersionSummaryInfo, ', ')
| project CorrelationId, OsVersion);
let SdkInfo = materialize(allParticipants
| summarize hint.strategy = shuffle count() by SdkVersion, CorrelationId
| extend SdkVersionStr = iff(isnotempty(SdkVersion), SdkVersion, 'Unknown')
| extend sdkVersionInfo = strcat(count_, ': ', SdkVersionStr)
| summarize hint.strategy = shuffle 
SdkVersionSummaryInfo = make_list(sdkVersionInfo, 100) by CorrelationId 
| extend SdkVersion = strcat_array(SdkVersionSummaryInfo, ', ')
| project CorrelationId, SdkVersion);
let clientTypeInfo = materialize(allParticipants
| summarize hint.strategy = shuffle count() by EndpointType, CorrelationId
| extend info = strcat(count_, ' ', EndpointType) 
| summarize hint.strategy = shuffle summaryInfo = make_list(info, 100) by CorrelationId 
| extend ClientType = strcat_array(summaryInfo, ', ')
| project CorrelationId, ClientType);
let totalNumOfParticipants = materialize(allParticipants | summarize hint.strategy = shuffle participantsCount = dcount(ParticipantId) by CorrelationId);
// quality
let qualityInfo = materialize(ACSCallDiagnostics
| where CorrelationId in (relatedCalls)
| where CorrelationId != ParticipantId
| extend ParticipantId = coalesce(ParticipantId, Identifier, EndpointId)
| extend ParticipantId = iff(ParticipantId == 'Redacted', strcat('RedactedParticipant-', EndpointType, '-Identifier-', Identifier), ParticipantId)
| extend EndpointId = iff(EndpointId == 'Redacted', strcat('RedactedEndpoint-', EndpointType, '-Identifier-', Identifier), EndpointId)
| where isnotempty(StreamId)
| summarize hint.strategy = shuffle arg_max(TimeGenerated, *) by ParticipantId, StreamId
| extend MediaType = iff(MediaType == 'VBSS' or MediaType == 'AppSharing', 'ScreenSharing', MediaType) | extend
__JitterQuality         = iff(JitterAvg > 30, "Poor", "Good"),
__JitterBufferQuality = iff(JitterBufferSizeAvg > 200, "Poor", "Good"),
__PacketLossRateQuality = iff(PacketLossRateAvg > 0.1, "Poor", "Good"),
__RoundTripTimeQuality  = iff(RoundTripTimeAvg > 500, "Poor", "Good"),
__HealedDataRatioQuality = iff(HealedDataRatioAvg > 0.1, "Poor", "Good"),
__VideoFrameRateQuality = iff((VideoFrameRateAvg < 1 and MediaType == 'ScreenSharing') or 
(VideoFrameRateAvg < 7 and MediaType == 'Video'), "Poor", "Good"),
__FreezesQuality = iff((RecvFreezeDurationPerMinuteInMs > 25000 and MediaType == 'ScreenSharing') or 
(RecvFreezeDurationPerMinuteInMs > 6000 and MediaType == 'Video'), "Poor", "Good"),
__VideoResolutionHeightQuality = iff((RecvResolutionHeight < 768 and MediaType == 'ScreenSharing') or 
(RecvResolutionHeight < 240 and MediaType == 'Video'), "Poor", "Good"),
__VideoBitRateQuality = iff((VideoBitRateAvg < 150000 and MediaType == 'Video'), "Poor", "Good")
| extend
__StreamQuality = iff(
(__JitterQuality == "Poor") 
or (__JitterBufferQuality == "Poor")
or (__PacketLossRateQuality == "Poor") 
or (__RoundTripTimeQuality == "Poor") 
or (__HealedDataRatioQuality == "Poor")
or (__VideoFrameRateQuality == "Poor")
or (__FreezesQuality == "Poor")
or (__VideoResolutionHeightQuality == "Poor")
or (__VideoBitRateQuality == "Poor"), 
"Poor", "Good"),
MediaDirection = iff(EndpointType == 'Server', 'InboundStream', 'OutboundStream')
| summarize hint.strategy = shuffle numOfPoorStreams = countif(__StreamQuality == 'Poor') by CorrelationId
| extend Quality = iff(numOfPoorStreams >0, 'Poor', 'Good') | project Quality, numOfPoorStreams, CorrelationId);
// rating
let ratingInfo = materialize(ACSCallSurvey
| where CallId in (relatedCalls)
| extend OverallRatingScoreUpperBound = iff(isnotempty(OverallRatingScoreUpperBound), OverallRatingScoreUpperBound, 5)
| summarize hint.strategy = shuffle Rating = avg(OverallRatingScore*5.0/OverallRatingScoreUpperBound) by CallId
| project CorrelationId=CallId, Rating);
// client operation issues
let rangeEventsWithCorrelation = dynamic(['UserFacingDiagnostics']);
let pointEvents = dynamic([
'SelectedMicrophoneChanged', 'SelectedSpeakerChanged', 'OptimalVideoCount-changed', 'State-changed', 'CallMode-changed',
'IsMuted-changed', 'IsIncomingAudioMuted-changed', 'Id-changed', 'Role-changed', 'SelectedDevice-changed', 'PageHidden',
'OptimalVideoCountChanged', 'StateChanged', 'IsMutedChanged', 'IsIncomingAudioMutedChanged', 'SelectedDeviceChanged']);
// We need clientIds to get all operations before call is established.
let callClientIds = materialize(ACSCallClientOperations
| where OperationName !in ('CallModeChanged', 'IdChanged', 'RoleChanged')
| where CallClientTimeStamp between (searchTimeLowerBound..searchTimeUpperBound)
| where ParticipantId in (relatedParticipants) or CallId in (relatedCalls)
| distinct ClientInstanceId, ParticipantId, CallId);
//
let allOperations =
materialize(callClientIds | join kind=rightouter hint.strategy=shuffle
(ACSCallClientOperations
| where OperationName !in ('CallModeChanged', 'IdChanged', 'RoleChanged')
| where CallClientTimeStamp between (searchTimeLowerBound..searchTimeUpperBound)
| where ParticipantId in (relatedParticipants) or CallId in (relatedCalls) or (isempty(CallId) and isempty(ParticipantId) and ClientInstanceId in ((callClientIds | distinct ClientInstanceId))) 
| where isnotempty(OperationName) and OperationName != 'CallClientOperations'
and isnotempty(OperationId) and isnotempty(CallClientTimeStamp))
on ClientInstanceId
| extend ParticipantId = coalesce(ParticipantId1, ParticipantId), CallId = coalesce(CallId1, CallId)
| project-away ParticipantId1, ClientInstanceId1, CallId1
| summarize hint.strategy = shuffle arg_max(TimeGenerated, *) by OperationId, OperationName, CallClientTimeStamp);
//
let correlatedOperations = materialize(allOperations
| where OperationName in (rangeEventsWithCorrelation)
| extend OperationPayload = todynamic(OperationPayload)
| extend 
UFDQuality = coalesce(tostring(OperationPayload.DiagnosticQuality), tostring(OperationPayload.diagnosticQuality)),
UFDType = coalesce(tostring(OperationPayload.DiagnosticChanged), tostring(OperationPayload.diagnosticChanged))
| extend UFDType = strcat(toupper(substring(UFDType, 0, 1)), substring(UFDType, 1))
| extend OperationPayloadNew = bag_pack(tostring(CallClientTimeStamp), OperationPayload)
| project-away ResultType
| summarize hint.strategy = shuffle
arg_max(TimeGenerated, *), ResultType = iff(countif(UFDQuality != 'Good')>0, 'Failed', 'Succeeded'), 
OperationStartTime = min(CallClientTimeStamp), OperationEndTime = max(CallClientTimeStamp),
OperationPayloadPacked = make_bag(OperationPayloadNew) by OperationId, UFDType, CallId
| extend ResultType = iff(UFDType has_any ("SpeakingWhileMicrophoneIsMuted", "SpeakerMuted"), 'Succeeded', ResultType), OperationName = UFDType
| where ResultType !in ('Succeeded', 'Success', 'ExpectedError'));
//
let nonCorrelatedOperations = materialize(allOperations
| where OperationName !in (rangeEventsWithCorrelation)
| extend OperationId = coalesce(hash_sha256(strcat(OperationId, tostring(CallClientTimeStamp), OperationName)), tostring(new_guid()))
| summarize hint.strategy = shuffle arg_max(TimeGenerated, *) by OperationId, CallId
| where ResultType !in ('Succeeded', 'Success', 'ExpectedError'));
let clientOperationIssues = 
materialize(union nonCorrelatedOperations, correlatedOperations
| summarize hint.strategy = shuffle numOfBadOperations=count() by OperationName, CallId
| extend badClientOperations = bag_pack(OperationName, numOfBadOperations)
| summarize hint.strategy = shuffle badClientOperations = make_bag(badClientOperations), numOfBadOperations = sum(numOfBadOperations) by CorrelationId=CallId);
////
searchedCalls 
| join kind=leftouter hint.strategy=shuffle clientTypeInfo on CorrelationId
| join kind=leftouter hint.strategy=shuffle ParticipantTypeInfo on CorrelationId
| join kind=leftouter hint.strategy=shuffle OsInfo on CorrelationId
| join kind=leftouter hint.strategy=shuffle SdkInfo on CorrelationId
| join kind=leftouter hint.strategy=shuffle qualityInfo on CorrelationId
| join kind=leftouter hint.strategy=shuffle ratingInfo on CorrelationId
| join kind=leftouter hint.strategy=shuffle clientOperationIssues on CorrelationId
| join kind=leftouter hint.strategy=shuffle totalNumOfParticipants on CorrelationId
| extend numOfPoorStreams = coalesce(numOfPoorStreams, 0)
| extend
drops=bag_pack('Call Ended Ungracefully', numOfDroppedParticipant),
badMediaStreams = bag_pack('Poor Media Streams', numOfPoorStreams),
Issues = coalesce(numOfBadOperations, 0) + numOfDroppedParticipant + numOfPoorStreams
| extend
IssuesBreakdown=bag_merge(drops, badClientOperations, badMediaStreams)
| project 
CallId=CorrelationId, 
CallStartTime, 
CallEndTime, 
CallType, 
ParticipantType, 
SdkVersion, 
OsVersion,
Participants=participantsCount, 
ClientType, 
Quality=iff(badClientOperations contains 'Network', 'Poor', iff(isempty(Quality), 'Unknown', Quality)), 
Rating=case(isempty(Rating), 'Unknown', Rating>=4.5, 'Good', Rating >=3, 'Average', 'Poor'),
NumOfDroppedParticipant = numOfDroppedParticipant,
NumOfPoorStreams = numOfPoorStreams,
Issues,
IssuesBreakdown
| order by CallStartTime desc
| where CallStartTime >= ago(7days)