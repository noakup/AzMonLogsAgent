let _RangeStart = iff((isnull(RangeStart)), startofday(ago(1d)), startofday(RangeStart));
let _RangeEnd = iff((isnull(RangeEnd)), now(), RangeEnd + 1d);
let _VaultSubscriptionList = split(VaultSubscriptionList, ',');
let _VaultLocationList = split(VaultLocationList, ',');
let _VaultList = split(VaultList, ',');
let _VaultTypeList = split(VaultTypeList, ',');
let _DatasourceTypeList = split(DatasourceTypeList,',');
let _ReplicatedItemName = ReplicatedItemName;
let AsonDay =  _RangeEnd - 1d;
let ASRReplicatedItemsUnderResourceSpecificHistory = ()
{
ASRReplicatedItems
// Take records until previous day
| where TimeGenerated >= _RangeStart and TimeGenerated <= _RangeEnd //and TimeGenerated < startofday(now())
| where tostring(split(_ResourceId, '/')[2]) in~ (_VaultSubscriptionList) or '*' in (_VaultSubscriptionList)
| where VaultLocation in~ (_VaultLocationList) or '*' in (_VaultLocationList)
| where VaultName in~  (_VaultList) or '*' in (_VaultList)
| where VaultType in~ (_VaultTypeList) or '*' in (_VaultTypeList)
| where DatasourceType in~ (_DatasourceTypeList) or "*" in (_DatasourceTypeList)
| where isempty(_ReplicatedItemName) or (_ReplicatedItemName) == "*" or ReplicatedItemFriendlyName contains (_ReplicatedItemName)
| project TimeGenerated, ResourceId = toupper(_ResourceId), ResourceGroup = toupper(tostring(split(_ResourceId,'/')[4])),SubscriptionId = toupper(tostring(split(_ResourceId,'/')[2])), VaultName, VaultType, Operation = OperationName, ReplicationHealthErrors, RecoveryRegion, MultiVMGroupId, LastSuccessfulTestFailoverTime, LastHeartbeat, ReplicationStatus, FailoverReadiness, DatasourceUniqueId, DatasourceFriendlyName, PrimaryFabricName, PrimaryFabricType, RecoveryFabricName, RecoveryFabricType, ProtectionInfo, ActiveLocation, PolicyFriendlyName, OSFamily, IRProgressPercentage, DatasourceType, LastRpoCalculatedTime, Version, ReplicatedItemId = toupper(ReplicatedItemId), ReplicatedItemUniqueId, SourceResourceId, PolicyUniqueId, PolicyId = toupper(PolicyId),ReplicatedItemFriendlyName, VaultLocation, DatasourceResourceGroup = toupper(tostring(split(SourceResourceId, '/')[4]))
| summarize arg_max(TimeGenerated, *) by ReplicatedItemUniqueId, TimeRangeEndDay = startofday(TimeGenerated)
| project TimeGenerated, ResourceId, ResourceGroup, SubscriptionId, VaultName, VaultType, Operation, ReplicationHealthErrors, RecoveryRegion, MultiVMGroupId, LastSuccessfulTestFailoverTime, LastHeartbeat, ReplicationStatus,FailoverReadiness, DatasourceFriendlyName, DatasourceUniqueId, PrimaryFabricName, PrimaryFabricType, RecoveryFabricName,RecoveryFabricType, ProtectionInfo, ActiveLocation, PolicyFriendlyName, OSFamily, IRProgressPercentage, DatasourceType,LastRpoCalculatedTime, Version, ReplicatedItemId, ReplicatedItemUniqueId, SourceResourceId, PolicyUniqueId, PolicyId,ReplicatedItemFriendlyName, VaultLocation, DatasourceResourceGroup
};
let ASRReplicatedItemsUnderResourceSpecific = () {
ASRReplicatedItems
| where TimeGenerated >= _RangeStart and TimeGenerated <= _RangeEnd //and TimeGenerated < startofday(now())
| where tostring(split(_ResourceId, '/')[2]) in~ (_VaultSubscriptionList) or '*' in (_VaultSubscriptionList)
| where VaultLocation in~ (_VaultLocationList) or '*' in (_VaultLocationList)
| where VaultName in~ (_VaultList) or '*' in (_VaultList)
| where VaultType in~ (_VaultTypeList) or '*' in (_VaultTypeList)
| where DatasourceType in~ (_DatasourceTypeList) or "*" in (_DatasourceTypeList)
| where isempty(_ReplicatedItemName) or (_ReplicatedItemName) == "*" or ReplicatedItemFriendlyName contains (_ReplicatedItemName)
| project TimeGenerated, ResourceId = toupper(_ResourceId), ResourceGroup = toupper(tostring(split(_ResourceId,'/')[4])),SubscriptionId = toupper(tostring(split(_ResourceId,'/')[2])), VaultName, VaultType, Operation = OperationName, ReplicationHealthErrors, RecoveryRegion, MultiVMGroupId, LastSuccessfulTestFailoverTime, LastHeartbeat, ReplicationStatus, FailoverReadiness, DatasourceUniqueId, DatasourceFriendlyName, PrimaryFabricName, PrimaryFabricType, RecoveryFabricName, RecoveryFabricType, ProtectionInfo, ActiveLocation, PolicyFriendlyName, OSFamily, IRProgressPercentage, DatasourceType, LastRpoCalculatedTime, Version, ReplicatedItemId = toupper(ReplicatedItemId), ReplicatedItemUniqueId, SourceResourceId, PolicyUniqueId, PolicyId = toupper(PolicyId),ReplicatedItemFriendlyName, VaultLocation, DatasourceResourceGroup = toupper(tostring(split(SourceResourceId, '/')[4]))
| summarize arg_max(TimeGenerated, *) by ReplicatedItemUniqueId
| project TimeGenerated, ResourceId, ResourceGroup, SubscriptionId, VaultName, VaultType, Operation, ReplicationHealthErrors, RecoveryRegion, MultiVMGroupId, LastSuccessfulTestFailoverTime, LastHeartbeat, ReplicationStatus,FailoverReadiness, DatasourceFriendlyName, DatasourceUniqueId, PrimaryFabricName, PrimaryFabricType, RecoveryFabricName,RecoveryFabricType, ProtectionInfo, ActiveLocation, PolicyFriendlyName, OSFamily, IRProgressPercentage, DatasourceType,LastRpoCalculatedTime, Version, ReplicatedItemId, ReplicatedItemUniqueId, SourceResourceId, PolicyUniqueId, PolicyId,ReplicatedItemFriendlyName, VaultLocation, DatasourceResourceGroup
};
let FinalTable_ASRReplicatedItems = () {
 union
        (ASRReplicatedItemsUnderResourceSpecific
 | where (_RangeEnd - _RangeStart == 1d)),
 (ASRReplicatedItemsUnderResourceSpecificHistory
 | where (_RangeEnd - _RangeStart > 1d))
};
let FinalTable_Reporting = () {
 FinalTable_ASRReplicatedItems
 | where "Microsoft.RecoveryServices/vaults" in~ (_VaultTypeList) or '*' in (_VaultTypeList)
};
FinalTable_Reporting