let _GenerateTargetHelper = (hostname: dynamic, port: dynamic, defaultPort: int) {
    iff(isnotempty(port) and toint(port) != defaultPort, strcat(tostring(hostname),":",tostring(port)), tostring(hostname))
};
let _GenerateTarget = (attributes: dynamic) { 
    let defaultPort = toint(case(
        isnotempty(attributes["url.scheme"]), iff(attributes["url.scheme"] == "https", 443, 80),
        isnotempty(attributes["url.full"]), iff(attributes["url.full"] startswith "https", 443, 80),
        isnotempty(attributes["http.url"]), iff(attributes["url.full"] startswith "https:", 443, 80),
        0
    ));
    case(
        isnotempty(attributes["server.address"]), _GenerateTargetHelper(attributes["server.address"], attributes["server.port"], defaultPort),
        isnotempty(attributes["url.full"]), _GenerateTargetHelper(deserialize_url(tostring(attributes["url.full"])).Host, deserialize_url(tostring(attributes["url.full"])).Port, defaultPort),
        isnotempty(attributes["http.url"]), _GenerateTargetHelper(deserialize_url(tostring(attributes["http.url"])).Host, deserialize_url(tostring(attributes["http.url"])).Port, defaultPort),
        isnotempty(attributes["net.peer.name"]), _GenerateTargetHelper(attributes["net.peer.name"], attributes["net.peer.port"], defaultPort),
        isnotempty(attributes["db.name"]), iff(isnotempty(attributes["peer.service"]), strcat(tostring(attributes["peer.service"]), " | ", tostring(attributes["db.name"])), tostring(attributes["db.name"])),
        isnotempty(attributes["rpc.service"]), tostring(attributes["rpc.service"]),
        tostring(attributes["peer.service"])
    )
};
source
| where itemType == "Span"
| where isnotnull(parent) and isnotnull(parent.parent)
// Helper extends (not in table output)
| extend scope = parent.item
| extend resource = parent.parent.item
| extend _attrKeys = tostring(bag_keys(item.attributes))
| extend _depType = case(
    _attrKeys contains "http.", "HTTP",
    _attrKeys contains "db.", "DB",
    _attrKeys contains "rpc.", "RPC",
    "OTHER"
)
| extend _ipAddr = case(
    isnotempty(item.attributes["client.address"]), tostring(item.attributes["client.address"]),
    isnotempty(item.attributes["http.client_ip"]), tostring(item.attributes["http.client_ip"]),
    isnotempty(item.attributes["net.peer.ip"]), tostring(item.attributes["net.peer.ip"]),
    "")
| extend _ipInfo = geo_location(_ipAddr)
| extend _userAgentString = case(
    isnotempty(item.attributes["user_agent.original"]), tostring(item.attributes["user_agent.original"]),
    isnotempty(item.attributes["http.user_agent"]), tostring(item.attributes["http.user_agent"]),
    "")
| extend _userAgent = iff(isnotempty(_userAgentString), parse_user_agent_client(_userAgentString, parse_json('["browser", "os"]')), parse_json('{browser: "", os: ""}'))
// Create user-facing output columns
| project
    TimeGenerated = unixtime_nanoseconds_todatetime(toreal(item.startTimeUnixNano)),
    Name = tostring(item.name),
    SpanId = tostring(item.spanId),
    ParentSpanId = tostring(item.parentSpanId),
    TraceId = tostring(item.traceId),
    TraceState = tostring(item.traceState),
    EndTime = unixtime_nanoseconds_todatetime(toreal(item.endTimeUnixNano)),
    StatusMessage = tostring(item.status.message),
    DroppedAttributesCount = toint(item.droppedAttributesCount),
    ResourceAttributes = item.resourceAttributes,
    DroppedEventsCount = toint(item.droppedEventsCount),
    DroppedLinksCount = toint(item.droppedLinksCount),
    ScopeName = tostring(scope.name),
    ScopeVersion = tostring(scope.version),
    ServiceNamespace = tostring(resource.attributes["service.namespace"]),
    ServiceName = tostring(resource.attributes["service.name"]),
    ServiceInstanceId = tostring(resource.attributes["service.instance.id"]),
    ResourceAttributesId = tostring(resource.itemId), // todo: this is an assumption on where pipeline will place this generated field.
    Attributes = item.attributes,
    Kind = case (
        item['kind'] == 0, "Unspecified",
        item['kind'] == 1, "Internal",
        item['kind'] == 2, "Server",
        item['kind'] == 3, "Client",
        item['kind'] == 4, "Producer",
        item['kind'] == 5, "Consumer",
        tostring(item['kind'])),
    Links = item.links,
    SDKVersion = strcat(
        "otlp:",
        iff(isnotempty(resource.attributes["telemetry.sdk.name"]), tostring(resource.attributes["telemetry.sdk.name"]), "unknown"),":",
        iff(isnotempty(resource.attributes["telemetry.sdk.language"]), tostring(resource.attributes["telemetry.sdk.language"]), "unknown"),":",
        iff(isnotempty(resource.attributes["telemetry.sdk.version"]), tostring(resource.attributes["telemetry.sdk.version"]), "unknown")
    ),
    ServiceVersion = tostring(resource.attributes["service.version"]),
    EndUserId = tostring(item.attributes["enduser.id"]),
    DurationMs = (toreal(item.endTimeUnixNano) - toreal(item.startTimeUnixNano)) / 1000.0,
    StatusCode = case (
        item.status.code == 0, "",
        item.status.code == 1, "OK",
        item.status.code == 2, "Error",
        tostring(item.status.code)
    ),
    ResultCode = tostring(item.attributes["http.status_code"]),
    ClientType = "PC",
    UserId = tostring(item.attributes["microsoft.user.id"]),
    UserAccountId = tostring(item.attributes["microsoft.user.account_id"]),
    OperationName = tostring(item.attributes["microsoft.operation.name"]),
    ClientModel = tostring(item.attributes["microsoft.client.model"]),
    SessionId = tostring(item.attributes["microsoft.session.id"]),
    Measurements = parse_json("{}"),
    SyntheticSource = tostring(item.attributes["microsoft.synthetic_source"]),
    Source = tostring(item.attributes["microsoft.request.source"]),
    ClientBrowser = tostring(_userAgent.browser),
    ClientOS = tostring(_userAgent.os),
    ClientIP = "0.0.0.0", // IP is always masked by default
    ClientCity = tostring(_ipInfo.city),
    ClientStateOrProvince = tostring(_ipInfo.state),
    ClientCountryOrRegion = tostring(_ipInfo.country),
    Target = _GenerateTarget(item.attributes),
    EnrichedName = case(
        item['kind'] != 2 and item['kind'] != 3, tostring(item.name),
        _depType != "HTTP", tostring(item.name),
        isnotempty(item.attributes["http.method"]), 
            case(
                isnotempty(item.attributes["http.route"]), strcat(tostring(item.attributes["http.method"]), " ", tostring(item.attributes["http.route"])),
                isnotempty(item.attributes["url.path"]), strcat(tostring(item.attributes["http.method"]), " ", tostring(item.attributes["url.path"])),
                strcat(tostring(item.attributes["http.method"]), " /")
            ),
        tostring(item.name)
    ),
    Success = case(
        item.status.code == 2, false,
        item['kind'] != 2, true,
        isnotempty(item.attributes["http.status_code"]), toint(item.attributes["http.status_code"]) < 400,
        isnotempty(item.attributes["http.response.status_code"]), toint(item.attributes["http.response.status_code"]) < 400,
        true
    ),
    DependencyType = case(
        item['kind'] == 1, "InProc",
        item['kind'] == 2, "",
        item['kind'] == 4, "Queue Message",
        isnotempty(item.attributes["az.namespace"]), tostring(item.attributes["az.namespace"]),
        isnotempty(item.attributes["db.system"]), tostring(item.attributes["db.system"]),
        isnotempty(item.attributes["rpc.system"]), tostring(item.attributes["rpc.system"]),
        isnotempty(item.attributes["messaging.system"]), tostring(item.attributes["messaging.system"]),
        _depType
    ),
    Data = case(
        isnotempty(item.attributes["url.full"]), tostring(item.attributes["url.full"]),
        isnotempty(item.attributes["http.url"]), tostring(item.attributes["http.url"]),
        isnotempty(item.attributes["db.statement"]), tostring(item.attributes["db.statement"]),
        isnotempty(item.attributes["db.operation"]), tostring(item.attributes["db.operation"]),
        isnotempty(item.attributes["rpc.method"]), tostring(item.attributes["rpc.method"]),
        ""
    ),
    ItemCount = iff(isnotempty(item.attributes["_MS.sampleRate"]), toint(100/todouble(item.attributes["_MS.sampleRate"])), toint(1))
    //_ItemId = item.itemid // Does the transform need to set this? Is pipeline handling it? Content must align with _ReferencedItemId in Events table
// Last stage enrichment
// Sanitize / Normalize / Deduplicate output attributes
| extend Attributes = bag_remove_keys(Attributes, parse_json('["client.address", "http.client_ip", "net.peer.ip"]')) // incoming IP addresses
| extend Attributes = bag_remove_keys(Attributes, parse_json('["microsoft.user.id", "microsoft.user.account_id", "microsoft.operation.name", "microsoft.client.model", "microsoft.session.id", "microsoft.synthetic_source", "_MS.sampleRate"]')) // ms-convention column overrides
| extend DependencyType = iff(DependencyType == "other_sql", "SQL", DependencyType)
| extend RoleName = case(
    isnotempty(ServiceName) and isnotempty(ServiceNamespace), strcat("[", ServiceNamespace, "]/", ServiceName),
    isnotempty(ServiceNamespace), strcat("[", ServiceNamespace, "]"),
    ServiceName)
| extend PerformanceBucket = case(
    DurationMs < 250, "<250ms",
    DurationMs < 500, "250ms-500ms",
    DurationMs < 1000, "500ms-1sec",
    DurationMs < 3000, "1sec-3sec",
    DurationMs < 7000, "3sec-7sec",
    DurationMs < 15000, "7sec-15sec",
    DurationMs < 30000, "15sec-30sec",
    DurationMs < 60000, "30sec-1min",
    DurationMs < 120000, "1min-2min",
    DurationMs < 300000, "2min-5min",
    ">=5min")
| extend Links = select_dynamic_properties(Links, 
    parse_json('{"traceId": "TraceId", "spanId": "SpanId", "traceState": "TraceState", "attributes": "Attributes", "droppedAttributesCount": "DroppedAttributesCount"}'))