let OktaSystemLogsSev = parse_json('{"DEBUG": "Informational","INFO": "Informational","WARN": "Medium", "ERROR": "High"}');
let OktaSystemLogsEventResult = parse_json('{"SUCCESS": "Success","ALLOW": "Success","DENY": "Failure", "SKIPPED": "Failure","FAILURE": "Failure","CHALLENGE": "Partial", "UNKNOWN": "NA"}'); 
let OktaDvcAction = parse_json('{"SUCCESS": "Success","ALLOW": "Allow","DENY": "Deny", "SKIPPED": "Drop","FAILURE": "Failure","CHALLENGE": "Partial", "UNKNOWN": "NA"}'); 
let OktaActorUserType = parse_json('{"SystemPrincipal": "System Principal","PublicClientApp": "Application","User": "Regular"}');
source
| extend 
    userId = iff(tostring(actor.id) == "unknown", "", tostring(actor.id)),
    username = iff(tostring(actor.alternateId) contains "@", tostring(actor.alternateId), "")
| project
    TimeGenerated = todatetime(published),
    ActorDetailEntry = actor.detailEntry,
    ActorDisplayName = tostring(actor.displayName),
    OriginalUserId = tostring(actor.id),
    OriginalActorAlternateId = tostring(actor.alternateId),
    ActorUserId = userId,
    ActorUserIdType = iff(isempty(userId), "", "OktaId"),
    ActorUsername = username,
    ActorUsernameType = iff(isempty(username), "", "UPN"),
    ActorUserType = tostring(OktaActorUserType[tostring(actor.type)]),
    OriginalUserType = tostring(actor.type),
    AuthenticationContextAuthenticationProvider = tostring(authenticationContext.authenticationProvider),
    AuthenticationContextAuthenticationStep = toint(authenticationContext.authenticationStep),
    AuthenticationContextCredentialProvider = tostring(authenticationContext.credentialProvider),
    LogonMethod = tostring(authenticationContext.credentialType),
    ActorSessionId = tostring(authenticationContext.externalSessionId),
    AuthenticationContextInterface = tostring(authenticationContext.interface),
    AuthenticationContextIssuerId = tostring(authenticationContext.issuer.id),
    AuthenticationContextIssuerType = tostring(authenticationContext.issuer.type),
    OriginalClientDevice = tostring(client.device),
    SrcDeviceType = iff(tostring(client.device) == "Computer", "Computer", ""),
    SrcGeoCity = tostring(client.geographicalContext.city),
    SrcGeoCountry = tostring(client.geographicalContext.country),
    SrcGeoLatitude = iff(isnotempty(client.geographicalContext.geolocation.lat), toreal(client.geographicalContext.geolocation.lat), real(null)),
    SrcGeoLongtitude = iff(isnotempty(client.geographicalContext.geolocation.lon), toreal(client.geographicalContext.geolocation.lon), real(null)),
    SrcGeoPostalCode = tostring(client.geographicalContext.postalCode),
    SrcGeoRegion = tostring(client.geographicalContext.state),
    SrcDvcIdType = iff(isempty(client.id), "", "OktaId"),
    SrcDvcId = tostring(client.id),
    SrcIpAddr = tostring(client.ipAddress),
    ActingAppName = tostring(client.userAgent.browser),
    ActingAppType = "Browser",
    SrcDvcOs = tostring(client.userAgent.os),
    HttpUserAgent = tostring(client.userAgent.rawUserAgent),
    SrcZone = tostring(client.zone),
    DebugData = todynamic(debugContext.debugData),
    EventMessage = tostring(displayMessage),
    EventOriginalType = tostring(eventType),
    LegacyEventType = tostring(legacyEventType),
    EventOriginalUid = tostring(uuid),
    EventOriginalResultDetails = tostring(outcome.reason),
    EventResult = tostring(OktaSystemLogsEventResult[tostring(outcome.result)]),
    OriginalOutcomeResult = tostring(outcome.result),
    Request = todynamic(request),
    SecurityContextAsNumber = toint(securityContext.asNumber),
    SecurityContextAsOrg = tostring(securityContext.asOrg),
    SecurityContextDomain = tostring(securityContext.domain),
    SrcIsp = tostring(securityContext.isp),
    SecurityContextIsProxy = tobool(securityContext.isProxy),
    EventSeverity = tostring(OktaSystemLogsSev[tostring(severity)]),
    OriginalSeverity = tostring(severity),
    OriginalTarget = todynamic(target),
    Version = tostring(version),
    TransactionType = tostring(transaction.type),
    TransactionId = tostring(transaction.id),
    TransactionDetail = todynamic(transaction.detail),
    DvcAction = tostring(OktaDvcAction[tostring(outcome.result)])